{"version":3,"file":"static/js/827.aafd0c3c.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","webpack://react-complete-guide/./src/components/UI/Modal.module.css?7053","components/UI/Modal.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN =\n  \"https://multipage-quote-app-fdaaa-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9h8Dh\"};","import classes from \"./Card.module.css\";\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\",\"invalid\":\"QuoteForm_invalid__yZe6r\",\"errorText\":\"QuoteForm_errorText__FKhoe\",\"backbtn\":\"QuoteForm_backbtn__e-ILa\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { BsArrowLeft } from \"react-icons/bs\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const [formValidity, setFormValidity] = useState({\n    author: true,\n    submitter: true,\n    text: true,\n  });\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const submittedByInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    //reading form values\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    const submittedBy = submittedByInputRef.current.value;\n    \n    //validating input\n    const enteredAuthorIsValid = !isEmpty(enteredAuthor);\n    const enteredTextIsValid = !isEmpty(enteredText);\n    const submitterIsValid = !isEmpty(submittedBy);\n\n    setFormValidity({\n      author: enteredAuthorIsValid,\n      submitter: submitterIsValid,\n      text: enteredTextIsValid,\n    })\n\n    const formIsValid = enteredAuthorIsValid && enteredTextIsValid && submitterIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText, submitter: submittedBy });\n\n    //clear form after submission\n    authorInputRef.current.value = '';\n    textInputRef.current.value = '';\n    submittedByInputRef.current.value = '';\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishedEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All changes will be lost!\"\n        }\n      />\n      <Link className={classes.backbtn} to=\"/quotes\">\n        <BsArrowLeft />\n      </Link>\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n          <div\n            className={`${classes.control} ${\n              formValidity.author ? \"\" : classes.invalid\n            }`}\n          >\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n            {!formValidity.author && (\n              <p className={classes.errorText}>Field must not be empty.</p>\n            )}\n          </div>\n          <div\n            className={`${classes.control} ${\n              formValidity.text ? \"\" : classes.invalid\n            }`}\n          >\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n            {!formValidity.text && (\n              <p className={classes.errorText}>Field must not be empty.</p>\n            )}\n          </div>\n          <div\n            className={`${classes.control} ${\n              formValidity.submitter ? \"\" : classes.invalid\n            }`}\n          >\n            <label htmlFor=\"submitter\">\n              Submitted By (can enter a unique username)\n            </label>\n            <input type=\"text\" id=\"submitter\" ref={submittedByInputRef} />\n            {!formValidity.submitter && (\n              <p className={classes.errorText}>Field must not be empty.</p>\n            )}\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishedEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;","// extracted by mini-css-extract-plugin\nexport default {\"modalOverlay\":\"Modal_modalOverlay__m8jDu\",\"modal\":\"Modal_modal__RajTW\",\"header\":\"Modal_header__VdBgK\",\"content\":\"Modal_content__0gsT8\",\"actions\":\"Modal_actions__f+o3e\"};","import classes from './Modal.module.css';\n\nfunction ModalOverlay(props) {\n  return (\n    <div className={classes.modalOverlay}>\n      <div className={classes.modal}>\n        <header className={classes.header}>\n          <h2>{props.title}</h2>\n        </header>\n        <div className={classes.content}>\n          <p>{props.message}</p>\n        </div>\n        <footer className={classes.actions}>\n          <button className=\"btn\" onClick={props.onConfirm}>\n            Return to All Quotes\n          </button>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nfunction AddCommentModal(props) {\n  return (\n        <ModalOverlay\n          title={props.title}\n          message={props.message}\n          onConfirm={props.onConfirm}\n        />\n  );\n}\n\nexport default AddCommentModal;","import { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory } from \"react-router-dom\";\n\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\nimport Modal from \"../components/UI/Modal\";\n\n\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n  const [showModal, setShowModal] = useState();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      setShowModal({\n        title: \"Your quote has been added\",\n        message: \"Thank you for your contribution!\",\n      });\n      \n    }\n  }, [status]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  const commentConfirmHandler = () => {\n    history.push(\"/quotes\");\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Add a New Quote</title>\n        <meta\n          name=\"description\"\n          content=\"Add a new funny, serious, or thought-provoking quote to the page\"\n        />\n      </Helmet>\n      <QuoteForm\n        isLoading={status === \"pending\"}\n        onAddQuote={addQuoteHandler}\n      />\n      {showModal && (\n        <Modal\n          title={showModal.title}\n          message={showModal.message}\n          onConfirm={commentConfirmHandler}\n        />\n      )}\n    </>\n  );\n};\n\nexport default NewQuote;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","children","isEmpty","value","trim","useState","isEntering","setIsEntering","author","submitter","text","formValidity","setFormValidity","authorInputRef","useRef","textInputRef","submittedByInputRef","Fragment","when","location","to","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","enteredText","submittedBy","enteredAuthorIsValid","enteredTextIsValid","submitterIsValid","onAddQuote","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","ModalOverlay","title","onConfirm","useHttp","history","useHistory","showModal","setShowModal","useEffect","Helmet","content","Modal"],"sourceRoot":""}