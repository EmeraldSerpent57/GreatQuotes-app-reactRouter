{"version":3,"file":"static/js/776.ef0dd56c.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN =\n  \"https://multipage-quote-app-fdaaa-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\",\"invalid\":\"NewCommentForm_invalid__v7AvP\",\"errorText\":\"NewCommentForm_errorText__KcfBf\"};","import { useRef, useEffect, useState } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst isEmpty = (value) => value.trim() === \"\";\n\nconst NewCommentForm = (props) => {\n  const [inputValidity, setInputValidity] = useState(true);\n\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    //validating input here\n    const commentIsValid = !isEmpty(enteredText);\n\n    setInputValidity({\n      text: commentIsValid,\n    });\n\n    if (!commentIsValid) {\n      return;\n    }\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n    \n    //clear form after submission\n    commentTextRef.current.value = '';\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={`${classes.control} ${inputValidity.text ? \"\" : classes.invalid}`} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment:</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n        {!inputValidity.text && (<p className={classes.errorText}>Please enter a comment.</p>)}\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  } \n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\"> No comments have been added.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\",\"divider\":\"HighlightedQuote_divider__-DV1x\",\"submitted\":\"HighlightedQuote_submitted__tO1x+\",\"backbtn\":\"HighlightedQuote_backbtn__yVU7P\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./HighlightedQuote.module.css\";\nimport {BsArrowLeft} from 'react-icons/bs';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <>\n      <Link className={classes.backbtn} to=\"/quotes\">\n        <BsArrowLeft />\n      </Link>\n      <figure className={classes.quote}>\n        <p>{props.text}</p>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <div className={classes.divider}></div>\n      <figure className={classes.submitted}>\n        <figcaption>Submitted By: {props.submitter}</figcaption>\n      </figure>\n    </>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\n\n/*\nconst DUMMY_QUOTES = [\n    { id: 'q1', author: 'Mitch Hedberg', text: \"I'm sick of following my dreams,man. I'm just going to ask where they're going and hook up with 'em later.\" },\n    { id: 'q2', author: 'Will Ferrell', text: \"Before you marry a person, you should first make them use a computer with slow internet to see who they really are.\" },\n    { id: 'q3', author: 'Ellen Degeneres', text: \"Never follow anyone else's path. Unless you're in the woods and you're lost and you see path. Then by all means follow that path.\" },\n    { id: 'q4', author: 'Anonymous', text: \"Insomnia sharpens your math skills because you spend all night calculating how much sleep you'll get if you're able to 'fall asleep right now.'\" },\n    { id: 'q5', author: 'Anonymous', text: \"I walk around like everything's fine, but deep down, inside my shoe, my sock is sliding off.\" },\n  ];\n  */\n\nconst QuoteDetails = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  //const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <>\n    <Helmet>\n      <title>View Comments and Details</title>\n      <meta name=\"description\" content=\"View selected quote, add and view comments\" />\n    </Helmet>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} submitter={loadedQuote.submitter} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </>\n  );\n};\n\nexport default QuoteDetails;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","useState","inputValidity","setInputValidity","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentIsValid","trim","text","className","classes","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","isAddingComment","setIsAddingComment","useParams","loadedComments","addedCommentHandler","length","onClick","to","author","submitter","match","useRouteMatch","Helmet","content","path","exact","url"],"sourceRoot":""}